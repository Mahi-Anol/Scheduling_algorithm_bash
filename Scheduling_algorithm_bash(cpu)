border()
{
   d=$1
   for((i=0;i<$(($(($d * 16))+$(($d+1))));i++)) #Turn Around time is the max string.It have a length of 16.
   do
      echo -n "-"
   done
   echo
}
print_input()
{
  border 3 
  printf "|%-16s|%-16s|%-16s|\n" "Process ID" "Arrival Time" "Burst Time"
  border 3
  for((i=0;i<$number;i++))
  do
    printf "|%-16s|%-16s|%-16s|\n" "${pid[$i]}" "${at[$i]}" "${bt[$i]}" 
  done
  border 3
}

print_input_p()
{
  border 4 
  printf "|%-16s|%-16s|%-16s|%-16s|\n" "Process ID" "Arrival Time" "Burst Time" "Priority"
  border 4
  for((i=0;i<$number;i++))
  do
    printf "|%-16s|%-16s|%-16s|%-16s|\n" "${pid[$i]}" "${at[$i]}" "${bt[$i]}" "${priority[$i]}";
  done
  border 4
}
print_output_p()
{
    border 8
  printf "|%-16s|%-16s|%-16s|%-16s|%-16s|%-16s|%-16s|%-16s|\n" "Process ID" "Arrival Time" "Burst Time" "Priority" "completion time" "waiting time" "Turn around time" "Responce time"
  border 8
  for((i=0;i<$number;i++))
  do
    printf "|%-16s|%-16s|%-16s|%-16s|%-16s|%-16s|%-16s|%-16s|\n" "${pid[$i]}" "${at[$i]}" "${bt[$i]}" "${priority[$i]}" "${ct[$i]}" "${wt[$i]}" "${tat[$i]}" "${rt[$i]}" 
  done
  border 8

  avg_tat=0
  
  for((i=0;i<$number;i++))
  do 
      avg_tat=$(($avg_tat+${tat[$i]}));
  done

  avg_tat=$(($avg_tat / $number))

  echo "Total avg turn around time = $avg_tat"
   
   avg_ct=0;

  for((i=0;i<$number;i++))
  do 
      avg_ct=$(($avg_ct+${ct[$i]}));
  done
   avg_ct=$(($avg_ct / $number))

  echo "Total avg completion time = $avg_ct"

}

swap()
{
   temp=${at[$1]}
   at[$1]=${at[$2]}   #swap arrival time
   at[$2]=$temp

   temp=${bt[$1]}
   bt[$1]=${bt[$2]}    #swap burst time
   bt[$2]=$temp

   temp=${pid[$1]}
   pid[$1]=${pid[$2]}     #swap id
   pid[$2]=$temp
}


sorta()#bubble sort
{
   for((i=0;i<$number;i++))
   do
      flag=0;
      for((j=0; j<$(($(($number-$i))-1)); j++))
      do
        if [ ${at[$j]} -gt ${at[$(($j+1))]} ]; then
              swap $j $(($j+1))
               flag=1;
        elif [ ${at[$j]} -eq ${at[$(($j+1))]} -a  ${pid[$j]} -gt ${pid[$(($j+1))]} ]; then
               swap $j $(($j+1))
               flag=1;
        fi
      done   
      if [ $flag -ne 1 ]; then
         break;
      fi
   done
}

sortb()#bubble sort burst
{
   for((i=0;i<$number;i++))
   do
      flag=0;
      for((j=0; j<$(($(($number-$i))-1)); j++))
      do
        if [ ${at[$i]} -eq ${at[$j]} ]
			then
				if [ ${bt[$i]} -gt ${bt[$j]} ]
				then
				    swap $i $j
				fi
			fi
      done   
      if [ $flag -ne 1 ]; then
         break;
      fi
   done
}

sortp()
{

    for((i=0;i<$number;i++))
   do
      flag=0;
      for((j=0; j<$(($(($number-$i))-1)); j++))
      do
        if [ ${at[$j]} -gt ${at[$(($j+1))]} ]; then
              swap $j $(($j+1))
               temp=${priority[$j]} 
			   priority[$j]=${priority[$i]}   
			   priority[$i]=$temp
               flag=1;
        elif [ ${at[$j]} -eq ${at[$(($j+1))]} -a  ${pid[$j]} -gt ${pid[$(($j+1))]} ]; then
               swap $j $(($j+1))
               temp=${priority[$j]} 
			   priority[$j]=${priority[$i]}   
			   priority[$i]=$temp
               flag=1;
        fi
      done   
      if [ $flag -ne 1 ]; then
         break;
      fi
   done

   #Priority sort

   for((i=0;i<$number;i++))
   do
      flag=0;
      for((j=0; j<$(($(($number-$i))-1)); j++))
      do
        if [ ${at[$j]} -eq ${at[$(($j+1))]} ]; then
            if [ ${priority[$i]} -gt ${priority[$j]} ]; then
               swap $j $(($j+1))
               temp=${priority[$j]} 
			   priority[$j]=${priority[$i]}   
			   priority[$i]=$temp
               flag=1;
            fi
        fi
      done   
      if [ $flag -ne 1 ]; then
         break;
      fi
   done

}

WaitingTime(){
    wt[0]=0;
	for((i=1;i<$number;i++))
    do
       wt[$i]=$(($((${wt[$(($i-1))]}+$((${at[$(($i-1))]}+${bt[$(($i-1))]}))))-${at[$i]}));
    done
}

TurnAroundTime(){
    for((i=0;i<$number;i++))
    {
        tat[$i]=$((${wt[$i]}+${bt[$i]}));
    }
}

CompletionTime()
{
    for((i=0;i<$number;i++))
    do
      ct[$i]=$((${at[$i]}+${tat[$i]}));
    done
}
start_time()
{
#  start=0;
   st[0]=at[0];
   for((i=1;i<$number;i++))
   do
      st[$i]=$((${st[$(($i-1))]}+${bt[$(($i-1))]}));
   done
}
ResponceTime()
{
    for((i=0;i<$number;i++))
    do
      rt[$i]=$((${st[$i]}-${at[$i]}));
    done
}

calc_times_fcfs()
{
    WaitingTime;
    TurnAroundTime;
    CompletionTime;
    start_time;
    ResponceTime;
}
print_output()
{
    border 7
  printf "|%-16s|%-16s|%-16s|%-16s|%-16s|%-16s|%-16s|\n" "Process ID" "Arrival Time" "Burst Time" "completion time" "waiting time" "Turn around time" "Responce time"
  border 7
  for((i=0;i<$number;i++))
  do
    printf "|%-16s|%-16s|%-16s|%-16s|%-16s|%-16s|%-16s|\n" "${pid[$i]}" "${at[$i]}" "${bt[$i]}" "${ct[$i]}" "${wt[$i]}" "${tat[$i]}" "${rt[$i]}" 
  done
  border 7

  avg_tat=0
  
  for((i=0;i<$number;i++))
  do 
      avg_tat=$(($avg_tat+${tat[$i]}));
  done

  avg_tat=$(($avg_tat / $number))

  echo "Total avg turn around time = $avg_tat"
   
   avg_ct=0;

  for((i=0;i<$number;i++))
  do 
      avg_ct=$(($avg_ct+${ct[$i]}));
  done
   avg_ct=$(($avg_ct / $number))

  echo "Total avg completion time = $avg_ct"

}

draw_grant()
{
    printf "x-x-x-x-x-x-x-Grant chart-x-x-x-x-x-x-x-x-x\n";

    for((i=0;i<$number;i++))
    do
        printf " ";
        for((j=0;j<${ct[$i]};j++))
        do
             printf "%s" "--";
        done
    done
    printf "\n|";

    for((i=0;i<$number;i++))
    do
        for((j=0;j<$((${ct[$i]}-1));j++))
        do
            printf "%s" " ";
        done
        printf "p%s" "${pid[$i]}";
        for((j=0;j<$((${ct[$i]}-1));j++))
        do
            printf "%s" " ";
        done
        printf "%s" "|";
    done
    printf "\n";
    for((i=0;i<$number;i++))
    do
        printf "%s" " ";
        for((j=0;j<${ct[$i]};j++))
        do
             printf "%s" "--";
        done
    done
    printf "\n0";
    for((i=0;i<$number;i++))
    do
        # printf "%s" " ";
        for((j=0;j<${ct[$i]};j++))
        do
            printf "%s" "  ";
        done
        if [ ${ct[$i]} -gt 9 ]; then
        printf "\b";
        fi
        printf "%s" "${ct[$i]}";
    done
    printf "\n";
}

calc_times_sjf()
{

    ct[0]=$((${at[0]}+${bt[0]}))
	tat[0]=$((${ct[0]}-${at[0]}))
	wt[0]=$((${tat[0]}-${bt[0]}))
	for ((i=1; i<$number; i++))
	do
		temp=${ct[$(($i - 1))]}
		low=${bt[$i]}
		for ((j=$i; j<$number; j++))
		do
			if [ $temp -ge ${at[$j]} ]
			then
				if [ $low -ge ${bt[$j]} ]
				then
					low=${bt[$j]}
					val=$j
				fi
			fi
		done
		ct[$val]=$(($temp + ${bt[$val]}))
		tat[$val]=$((${ct[$val]} - ${at[$val]}))
		wt[$val]=$((${tat[$val]} - ${bt[$val]}))

		if [ $val -ne $i ]
		then
			temp=${at[$val]} 
			at[$val]=${at[$i]}   
			at[$i]=$temp 
			
			temp=${bt[$val]} 
			bt[$val]=${bt[$i]}   
			bt[$i]=$temp
			
			temp=${pid[$val]} 
			pid[$val]=${pid[$i]}   
			pid[$i]=$temp
			
			temp=${ct[$val]} 
			ct[$val]=${ct[$i]}   
			ct[$i]=$temp 
			
			temp=${wt[$val]} 
			wt[$val]=${wt[$i]}   
			wt[$i]=$temp
			
			temp=${tat[$val]} 
			tat[$val]=${pid[$i]}   
			tat[$i]=$temp
		fi
	done

}
npps()
{
     echo "------You have decided to simulate Priority Scheduling (NP) algorithm-------";

     echo -n "Enter Number of processes: ";
       read number;
     
       echo "------Now enter process id,arrival time,burst time,priority for all $number processes-------"
       for((i=0;i<$number;i++))
       do
        read -p "Enter process id,arrival time,burst time,priority for process $((i+1)) : " pid[$i] at[$i] bt[$i] priority[$i];
       done

       print_input_p;

       sortp;

       calc_times_fcfs;
       start_time;

       print_output_p;

       draw_grant;

    echo "------You successfully finished SJF simulation--------";
    echo;
    echo "Would you like to simulate again?";
    echo

}
sjf()
{
    echo "------You have decided to simulate SJF algorithm-------";

     echo -n "Enter Number of processes: ";
       read number;
     
       echo "------Now enter process id,arrival time,burst time for all $number processes-------"
       for((i=0;i<$number;i++))
       do
        read -p "Enter process id,arrival time,burst time for process $((i+1)) : " pid[$i] at[$i] bt[$i];
       done

       print_input;

       sorta;
       sortb;

       calc_times_sjf;
       start_time;

       print_output;

       draw_grant;

    echo "------You successfully finished SJF simulation--------";
    echo;
    echo "Would you like to simulate again?";
    echo
}
fcfs()
{
    echo "------You have decided to simulate FCFS algorithm-------";

       echo -n "Enter Number of processes: ";
       read number;
     
       echo "------Now enter process id,arrival time,burst time for all $number processes-------"
       for((i=0;i<$number;i++))
       do
        read -p "Enter process id,arrival time,burst time for process $((i+1)) : " pid[$i] at[$i] bt[$i];
       done

       print_input;

       sorta;

       calc_times_fcfs;

       print_output;

       draw_grant;
    echo "------You successfully finished FCFS simulation--------";
    echo;
    echo "Would you like to simulate again?";
    echo
}
main()
{
    echo "+++++++++++++++++++++++Assalamualaikum+++++++++++++++++++++++++"
    echo
    echo "*********Welcome to CPU Scheduling Algorithm Simulator*********"
    printf "\n%23s\n" "Developed By"
    for((i=0;i<35;i++))
    do
       echo -n "-";
    done
    echo;
    printf "|%-12s|%-20s|\n" "ID" "Name";
    for((i=0;i<35;i++))
    do
       echo -n "-";
    done
    echo;
    printf "|%-12s|%-20s|\n" "201-15-13664" "Mahi Sarwar Anol";
    for((i=0;i<35;i++))
    do
       echo -n "-";
    done
    echo
    printf "|%-12s|%-20s|\n" "201-15-14046" "Fabia Chowdhury";
    for((i=0;i<35;i++))
    do
       echo -n "-";
    done
    echo
    printf "|%-12s|%-20s|\n" "201-15-13735" "Jannat Ara Haque Jui";
    for((i=0;i<35;i++))
    do
       echo -n "-";
    done
    echo
    echo
    ul=5;#until loop runner
    until [ $ul -eq 1 ]
    do
      echo "Please Select a algorithm you want to simulate";
      echo "N.B: Give option number as input";
      echo "1)First Come First Serve (FCFS)";
      echo "2)Shortest Job First (SJF)";
      echo "3)Priority Scheduling Non-Premtive";
      echo "4)Exit";
      read -p "Enter Choice : " option;
      if [ $option -ge 1 -a $option -le 4 ]; then
         case $option in
            1) fcfs;;
            2) sjf;;
            3) npps;;
            4) ul=1
                echo "****Special thanks to honourable Hasna Hena mam for giving us this wonderful oppurtunity****";
                echo "Thanks for guiding us througout the whole course,and sharing your knowledge.";
                echo "\"With Great power comes great responsibility.\"";
                echo "We will try our best to use your teachings for the good of mankind."
                echo "Keep us in prayers"; ;;
            *) echo "Something is wrong,try again";
               continue; ;; 
            esac
      else 
        echo "You Have Entered a invalid input.Please try again.";
        continue;
      fi
    done
}
main
